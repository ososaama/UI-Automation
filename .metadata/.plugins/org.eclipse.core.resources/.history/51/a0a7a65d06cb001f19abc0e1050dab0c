package Pages;

import java.time.Duration;
import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import Utilities.BasePage;

public class VideoGames extends BasePage {
	
	 @FindBy(xpath = "//label[@for='apb-browse-refinements-checkbox_0']//i[@class='a-icon a-icon-checkbox']")
	 private WebElement freeShippingCheckbox;
	 
	 @FindBy(xpath = "//span[@class='a-size-base a-color-base'][normalize-space()='New']")
	 private WebElement conditionNewFilter;
	
	 @FindBy(id = "s-result-sort-select")
	 private WebElement sortDropdown;
	 
	 @FindBy(xpath = "//option[@value='price-desc-rank']")
	 private WebElement highToLowOption;
	 
	 @FindBy(xpath = "//span[@class='a-price-whole']")
	    private List<WebElement> productPrices;

	 @FindBy(xpath = "//input[@aria-labelledby='add-to-cart-button-announce']")
	    private List<WebElement> addToCartButtons;

	 @FindBy(xpath = "//a[contains(@class, 's-pagination-next')]")
	    private WebElement nextPageButton;

	 @FindBy(xpath = "//div[@data-component-type='s-search-result']")
	    private List<WebElement> productContainers;
	 
   
    public VideoGames(WebDriver driver) {
        super(driver);
        PageFactory.initElements(driver, this);
    }
    
    public void applyFilters() {
    	WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
    	
        WebElement freeShipping = wait.until(ExpectedConditions.visibilityOf(freeShippingCheckbox));
    	scrollToElement(freeShipping);
        clickElement(freeShipping);
        
        WebElement newCondition = wait.until(ExpectedConditions.visibilityOf(conditionNewFilter));
        scrollToElement(newCondition);
        clickElement(newCondition);
    }
    
    public void sortByHighToLow() {
    	clickElement(sortDropdown);
    	clickElement(highToLowOption);
    }
    
    public void addProductsBelow15k() {
        boolean productsFound = false;

        do {
            productsFound = false;

            // Iterate over product containers to ensure the price and Add to Cart button are aligned
            for (int i = 0; i < productContainers.size(); i++) {
                try {
                    WebElement priceElement = productContainers.get(i).findElement(By.xpath(".//span[@class='a-price-whole']"));
                    WebElement addToCartButton = productContainers.get(i).findElement(By.xpath(".//input[@aria-labelledby='add-to-cart-button-announce']"));

                    String priceText = priceElement.getText().replace(",", "").trim();
                    int price = Integer.parseInt(priceText);

                    if (price < 15000) {
                        scrollToElement(addToCartButton);
                        clickElement(addToCartButton);
                        productsFound = true;
                    }
                } catch (Exception e) {
                    // Log issues for products that are missing prices or buttons
                    System.out.println("Error processing product: " + e.getMessage());
                }
            }

            // Move to the next page if no products were found on the current page
            if (!productsFound && isElementPresent(nextPageButton)) {
                scrollToElement(nextPageButton);
                clickElement(nextPageButton);
                waitForPageToLoad();
            } else {
                break;
            }

        } while (true);
    }
}


